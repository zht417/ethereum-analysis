ethdb包是ETH存储数据的工具包，目前支持的数据库为LevelDB,数据存储为K-V格式，一般key存储hash，value存储RLP编码后的数据结构，支持单项与批量插入（PUT）、查询(GET)、检验(HAS)、删除(DELETE)、监控(meter)等操作。
ethdb包源码目前包含四个文件：database.go、database_test.go、interface.go、memory_database.go
core/database_util.go是底层数据结构整理与配合ethdb入库、查询操作的基础方法类。

源码分析
	1.interface.go
	   统一接口封装，包含数据库的单/批操作方法(putter,get,has,delete,close,batch)
    2.database.go
	   a.NewLDBDatabase()--初始化LevelDB实例,初始化数据库数据，文件缓存容量+块缓存容量+写缓存等
	   b.Put()--保存数据，将数据放入levelDB存储队列
	   c.Has()--校验key值在LevelDB中是否存在
	   d.Get()--查询key对应的value值
	   e.Delete()--删除key对应的数据
	   f.NewIterator()--创建LevelDB数据遍历器
	   g.Close()--数据库关闭操作
	   h.Meter()--初始化特殊请求前缀，并启动监听程序
	   i.NewBatch()--初始化批处理实例，后续提供了相关Put/ValueSize/Write等方法
	   j.table/tableBatch--按照前缀操作单/批量数据的实例，后续提供了相关Put/Has/Get/Delete/Close等方法
    3.database_test.go
	   基于database.go对外提供的测试接口
	4.memory_database.go
	   使用内存变量模拟数据库单/批的并行操作

LevelDB
参考网站：http://blog.csdn.net/linuxheik/article/details/52768223


参考网站：http://blog.csdn.net/ddffr/article/details/78773013

区块数据示例：
{
    "jsonrpc": "2.0",
    "id": 1,
    "result": {
        "difficulty": "0x7b56814e8e0",
        "extraData": "0xd783010203844765746887676f312e342e32856c696e7578",
        "gasLimit": "0x2fefd8",
        "gasUsed": "0x37c5e",
        "hash": "0x3d3ebb11286a91fdc00cfb6ffa4f4a73e3e528ce13467bb2203532dc9cb42a8f",
        "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000400000000000000000000040000000000000",
        "miner": "0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5",
        "mixHash": "0x40384589c970bff24a4d5d87692cfd948c89cb7e5381ad28d31071e85c7f22b6",
        "nonce": "0xda9cbaa29db514a5",
        "number": "0xaae61",
        "parentHash": "0x6c621dc6d89cecd48004bd6bd6f3098a18f61aa140b912f0db583198cb69558e",
        "receiptsRoot": "0x852ede9b7d114119ecf6f6221f9f6ed059bb25e098ffc6ae89f451186d44c056",
        "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
        "size": "0x572",
        "stateRoot": "0x3b65505100e6fdfa2649764e63a7a980aebfd93726690fe0239e384ede4e3980",
        "timestamp": "0x567137a7",
        "totalDifficulty": "0x3b49b0afd6d0597c",
		"transactionsRoot": "0xb42c31f189406cc77674b5e6f7a7b7d63dd895f875befb3351fb117f37580d38",
        "uncles": [],
        "transactions": [
            {
                "blockHash": "0x3d3ebb11286a91fdc00cfb6ffa4f4a73e3e528ce13467bb2203532dc9cb42a8f",
                "blockNumber": "0xaae61",
                "from": "0xcba4c3cc041b09d3cbf416b73633cb6bd21c88f8",
                "gas": "0x3d090",
                "gasPrice": "0xc1b710800",
                "hash": "0x8c1dd51958fc97a95a24acce4cafba517337138545b57a84cdef3e970bbdf919",
                "input": "0x651e723c000000000000000000000000f0b019bb52f59680845b670453ffd875ae3a59e400000000000000000000000000000000000000000000000000000000567137b900000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000002961caac0fcae0a7f51e4131ef6a243df537d11696bb1a27bac34e37a7c198b9b7ca5c71e62ed55fbca1516ad12305849bfb7421cc199d40dd08f8bb8bd0b57dc0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000001b0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000f0b019bb52f59680845b670453ffd875ae3a59e400000000000000000000000059cc8539f5515335f1340662ce569fa988b40938000000000000000000000000761566074a8e0f7063044abfb8c80ca4cd8c5fd3000000000000000000000000d4fcbd984baebcc12f70f9a151c5c5708d825a7f",
                "nonce": "0x35",
                "to": "0x7de5aba7de728950c92c57d08e20d4077161f12f",
                "transactionIndex": "0x0",
                "value": "0x1",
                "v": "0x1b",
                "r": "0x378066c58af812dc57dc3d090cd6717338d1e51bc1d6fbc308e293ebb69089b",
                "s": "0x6208bfb9f67145ce1ac7fadb65682f3a2ea43380e80d07f6d0eab8e5fc5df926"
            },
            {
                "blockHash": "0x3d3ebb11286a91fdc00cfb6ffa4f4a73e3e528ce13467bb2203532dc9cb42a8f",
                "blockNumber": "0xaae61",
                "from": "0xf8b483dba2c3b7176a3da549ad41a48bb3121069",
                "gas": "0x15f90",
                "gasPrice": "0xba43b7400",
                "hash": "0x5408d12bde03366c4a4b9ad484341bd1c69f86c58ef27a792d1fff1ceda6a6be",
                "input": "0x",
                "nonce": "0x7e55",
                "to": "0xec33b995e319527958760affd24f61fee029e4f9",
                "transactionIndex": "0x1",
                "value": "0x15c98d913a1bc00",
                "v": "0x1c",
                "r": "0xd308fb2c73d6f72545d0f7f5b9ac393f28834bb1f4c64c625cfb71f6ff0fd9f4",
                "s": "0x20ca14e9481c8c8a97ed2d761f3692e05fb3d7dc262176203670be6d6f934573"
            },
            {
                "blockHash": "0x3d3ebb11286a91fdc00cfb6ffa4f4a73e3e528ce13467bb2203532dc9cb42a8f",
                "blockNumber": "0xaae61",
                "from": "0x2a65aca4d5fc5b5c859090a6c34d164135398226",
                "gas": "0x15f90",
                "gasPrice": "0xba43b7400",
                "hash": "0x5d8cb5dfd613171daf733f65baefe727060bef89e705a4a7ac46cda1ffb53744",
                "input": "0x",
                "nonce": "0xf4ae",
                "to": "0x7fdf07a0f977e4032c1f082df831423abf58d13d",
                "transactionIndex": "0x2",
                "value": "0xf6ceba93384a000",
                "v": "0x1b",
                "r": "0xa24aefa55e9e47915a0b67bbac1b4cc0a823574077cb60a0b2f75f05eec758e8",
                "s": "0x1b2b89d5a963003283b81c5da14e58b52a611827db1066f0992d36b2fd88a4d"
            }
        ]
    }
}

block块数据
	type Block struct {
		header       *Header
		uncles       []*Header
		transactions Transactions

		// caches
		hash atomic.Value
		size atomic.Value

		// Td is used by package core to store the total difficulty
		// of the chain up to and including the block.
		td *big.Int

		// These fields are used by package eth to track
		// inter-peer block relay.
		ReceivedAt   time.Time
		ReceivedFrom interface{}
	}
	
header数据
	type Header struct {
		ParentHash  common.Hash    `json:"parentHash"       gencodec:"required"` // 指向父区块的指针。
		UncleHash   common.Hash    `json:"sha3Uncles"       gencodec:"required"` // Block结构体的成员uncles的RLP哈希值。
		Coinbase    common.Address `json:"miner"            gencodec:"required"` // 挖掘出这个区块的作者地址。
		Root        common.Hash    `json:"stateRoot"        gencodec:"required"` // StateDB中的“state Trie”的根节点的RLP哈希值。
		TxHash      common.Hash    `json:"transactionsRoot" gencodec:"required"` // Block中 “tx Trie”的根节点的RLP哈希值。
		ReceiptHash common.Hash    `json:"receiptsRoot"     gencodec:"required"` // Block中的 "Receipt Trie”的根节点的RLP哈希值。
		Bloom       Bloom          `json:"logsBloom"        gencodec:"required"` // Bloom过滤器(Filter)，用来快速判断一个参数Log对象是否存在于一组已知的Log集合中。
		Difficulty  *big.Int       `json:"difficulty"       gencodec:"required"` // 区块的难度。
		Number      *big.Int       `json:"number"           gencodec:"required"` // 区块的序号。
		GasLimit    uint64         `json:"gasLimit"         gencodec:"required"` // 区块内所有Gas消耗的理论上限。
		GasUsed     uint64         `json:"gasUsed"          gencodec:"required"` // 区块内所有Transaction执行时所实际消耗的Gas总和。
		Time        *big.Int       `json:"timestamp"        gencodec:"required"` // 区块时间戳，要么等于parentBlock.Time + 10s，要么等于当前系统时间。
		Extra       []byte         `json:"extraData"        gencodec:"required"` // ?
		MixDigest   common.Hash    `json:"mixHash"          gencodec:"required"` // ?
		Nonce       BlockNonce     `json:"nonce"            gencodec:"required"` // 挖矿随机数，一个64bit的哈希数。
	}
	
Transaction数据
    type Transaction struct {
		data txdata  //交易明细
		// caches
		hash atomic.Value // 交易hash
		size atomic.Value // ?
		from atomic.Value // from地址
	}

	type txdata struct {
		AccountNonce uint64          `json:"nonce"    gencodec:"required"`
		Price        *big.Int        `json:"gasPrice" gencodec:"required"`
		GasLimit     uint64          `json:"gas"      gencodec:"required"`
		Recipient    *common.Address `json:"to"       rlp:"nil"` // nil means contract creation
		Amount       *big.Int        `json:"value"    gencodec:"required"`
		Payload      []byte          `json:"input"    gencodec:"required"`

		// Signature values
		V *big.Int `json:"v" gencodec:"required"`
		R *big.Int `json:"r" gencodec:"required"`
		S *big.Int `json:"s" gencodec:"required"`

		// This is only used when marshaling to JSON.
		Hash *common.Hash `json:"hash" rlp:"-"`
	}
	



初始化前缀信息
	headHeaderKey = []byte("LastHeader")  // 最新区块头 Headchain中使用
	headBlockKey  = []byte("LastBlock")   // 最新区块   BlockChain中使用
	headFastKey   = []byte("LastFast")   //  最新快速同步的区块头 这里“LastFast”所存储的是在一种特别的同步方式FastSync下，最新Block的canonical hash。FastSync相比于FullSync，可以仅仅同步Header而不考虑Body，故此得名Fast。

	// Data item prefixes (use single byte to avoid mixing data types, avoid `i`). ETH定义好的区块头前缀标识,key的前缀可以区分leveldb中存储的是什么类型的数据。
	headerPrefix        = []byte("h") // headerPrefix + num (uint64 big endian) + hash -> header   区块头key前缀
	tdSuffix            = []byte("t") // headerPrefix + num (uint64 big endian) + hash + tdSuffix -> td  区块难度
	numSuffix           = []byte("n") // headerPrefix + num (uint64 big endian) + numSuffix -> hash  区块高度
	blockHashPrefix     = []byte("H") // blockHashPrefix + hash -> num (uint64 big endian) 区块hash前缀
	bodyPrefix          = []byte("b") // bodyPrefix + num (uint64 big endian) + hash -> block body 区块体前缀
	blockReceiptsPrefix = []byte("r") // blockReceiptsPrefix + num (uint64 big endian) + hash -> block receipts 区块交易收据
	lookupPrefix        = []byte("l") // lookupPrefix + hash -> transaction/receipt lookup metadata
	bloomBitsPrefix     = []byte("B") // bloomBitsPrefix + bit (uint16 big endian) + section (uint64 big endian) + hash -> bloom bits

	preimagePrefix = "secure-key-"              // preimagePrefix + hash -> preimage
	configPrefix   = []byte("ethereum-config-") // config prefix for the db

	// Chain index prefixes (use `i` + single byte to avoid mixing data types).
	BloomBitsIndexPrefix = []byte("iB") // BloomBitsIndexPrefix is the data table of a chain indexer to track its progress

	// used by old db, now only used for conversion
	oldReceiptsPrefix = []byte("receipts-")
	oldTxMetaSuffix   = []byte{0x01}

	ErrChainConfigNotFound = errors.New("ChainConfig not found") // general config not found error

	preimageCounter    = metrics.NewCounter("db/preimage/total")
	preimageHitCounter = metrics.NewCounter("db/preimage/hits")




 

数据库操作封装
1.块hash -> 块头
headerPrefix = []byte("h") // headerPrefix + num (uint64 big endian) + hash -> header

a.WriteHeader()
b.GetHeaderRLP() 
c.GetHeader() 
d.DeleteHeader()


2.块hash -> 总难度
tdSuffix = []byte("t") // headerPrefix + num (uint64 big endian) + hash + tdSuffix -> td

a.WriteTd()
b.GetTd()
c.DeleteTd()


3.块高 -> 块hash
numSuffix  = []byte("n") // headerPrefix + num (uint64 big endian) + numSuffix -> hash  

canonical hash：区块hash，Block(或Header)对象的RLP哈希值。
num(Number)和hash是Block最为重要的两个属性：num用来确定Block在整个区块链中所处的位置，hash用来辨识惟一的Block/Header对象。

a.encodeBlockNumber(number uint64) //将区块高度转化为ig endian uint64类型,大端格式
b.GetCanonicalHash()  
c.WriteCanonicalHash() 
d.DeleteCanonicalHash()


4.块hash -> 块高
blockHashPrefix = []byte("H") // blockHashPrefix + hash -> num (uint64 big endian)


5.块hash -> body数据
bodyPrefix = []byte("b") // bodyPrefix + num (uint64 big endian) + hash -> block body

a.WriteBodyRLP()
b.GetBodyRLP()
c.WriteBody()
d.GetBody() 
e.DeleteBody()


6.块hash -> 交易收据
blockReceiptsPrefix = []byte("r") // blockReceiptsPrefix + num (uint64 big endian) + hash -> block receipts

a.WriteBlockReceipts()
b.GetBlockReceipts()
c.DeleteBlockReceipts()


7.块hash -> 交易收据lookup metadata
lookupPrefix = []byte("l") // lookupPrefix + hash -> transaction/receipt lookup metadata

a.WriteTxLookupEntries()
b.GetTxLookupEntry()
c.DeleteTxLookupEntry()


8.块高 -> bloom bits
bloomBitsPrefix = []byte("B") // bloomBitsPrefix + bit(uint16 big endian) + section(uint64 big endian) + hash -> bloom bits

a.WriteBloomBits() 
b.GetBloomBits()


9.没看懂
preimagePrefix = "secure-key-"  // preimagePrefix + hash -> preimage(原像)

WritePreimages()


10.eth配置数据库信息
configPrefix = []byte("ethereum-config-") // config prefix for the db

a.WriteChainConfig()
b.GetChainConfig()


11.没看懂
BloomBitsIndexPrefix = []byte("iB") // BloomBitsIndexPrefix is the data table of a chain indexer to track its progress 索引进度跟踪


12.//used by old db, now only used for conversion 转换
oldReceiptsPrefix = []byte("receipts-")
oldTxMetaSuffix   = []byte{0x01}


对外封装方法：
1.初始化数据
  missingNumber  // 如果数据库中没有获取到块高数据，则使用该缺省块高。
  TxLookupEntry  //Lookup实体

2.块高
  GetBlockNumber()  //返回missingNumber/块高
  
3.块hash
  WriteHeadHeaderHash() 
  GetHeadHeaderHash() //返回当前块头的hash

  WriteHeadBlockHash()
  GetHeadBlockHash() //返回当前块头的hash

  WriteHeadFastBlockHash()
  GetHeadFastBlockHash() //返回当前块头的hash

4.区块操作
  WriteBlock()
  GetBlock()
  DeleteBlock()

5.区块头操作
  FindCommonAncestor() // 获取两个区块头的共同父类区块头信息？
  
6.交易信息
  GetTransaction()
  
7.交易收据信息
  GetReceipt()
  
8.区块链操作
  WriteBlockChainVersion()
  GetBlockChainVersion()

9.公用方法
  headerKey()  //公用headerKey生成
  blockBodyKey() //公用bodyKey生成













